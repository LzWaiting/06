Git 基本命令
	初始化仓库
		git init
		* 在某个目录下初始化仓库后，会自动产生.git目录。该目录下工作的所有文档即可以使用git进行管理
	查看分支状态
		git status
		* 默认工作分支为master，可通过创建新的分支切换
	文件的提交
		git add [file]
		* 将文件提交到暂存区
		* 提交内容可以是一个文件，如果是多个文件用空格隔开
		* 如果是 * 表示所有文件，也可以是目录  
		删除暂存区某个文件提交记录记录
			git rm --cached file
	文件同步到本地仓库
		git commit -m 'some message'
		* 同步时需要附加一些同步信息 在-m后添加
		* 所有对工作区的修改，如果想同步到本地仓库，都需要 add --> commit
	查看commit日志
		git log
		git log --pretty=oneline	查看单行commit日志信息

	一些工作区命令
		* 查看本地文件和工作区差异
			git diff file
		* 从本地仓库恢复文件
			git checkout file
		* 丢弃工作区对文件的修改
			git checkout -- file

	本地仓库文件的移动和删除
		移动 --> git mv file dir
		删除 --> git rm file
		用法和mv rm命令相同，操作后直接commit即可工作区和本地仓库同步

	版本控制命令
		回到之前版本
			git reset --hard HEAD^
			* HEAD 后的^数量决定了回到上几个版本
		回到指定版本
			git reset --hard commit_id
			* 使用commit前7位即可，回到指定的版本
		去往更新的版本	
			1. 查看所有历史commit_id 版本号
				git reflog
			2. 使用 git reset 去往指定版本
				git reset --hard commit_id
				* git reflog 会有所有的操作记录，最新的操作始终在最上面
				--HEAD --> 指针

	标签管理
		什么是标签：即在当前工作位置添加快照，保存工作状态，一般用于版本的迭代
		创建新的标签
			git tag v1.0
			* 默认在最新的 commit_id 处打标签
			git tag v1.0 -m 'message'
			指定某个版本commit_id 打标签
			git tag v0.9 [commit_id]
		查看当前标签
			git tag
			* 列出当前标签
			git show v1.0
			* 显示标签具体信息
		删除标签
			git tag -d v1.0
		去往某个标签版本
			git reset --hard v0.9

	临时工作区操作
		创建保存临时工作区
			git stash
		查看保存的工作区
			git stash list
		应用到指定工作区
			git stash apply stash@{1} 
			应用上一个工作区并且删除
				git stash pop
		删除临时工作区
			git stash drop stash@{1}	# 删除某一个
			git stash clear				# 删除所有

	分支操作
		什么是分支？
			分支即每个人获取原有代码，在此基础上创建自己的工作环境，单独开发，不会影响其他分支的操作，开发完成后再统一合并到主线分支中
		分支的优点
			安全，不影响其他人工作，自己控制进度
		查看当前分支
			git branch
			* 前面有 * 号的分支表示当前正在工作的分支 
		创建新的分支
			git branch [branch_name]
		切换到某一工作分支
			git checkout [branch_name]
		创建并切换到新的分支
			git checkout -b [branch_name]
		分支合并
			将某个分支合并到当前分支
			git merge [branch_name]
			* 合并过程中如果没有冲突，则直接合并后当前分支即为干净的状态
			* 如果产生冲突，则需要人为选择然后再进行add commit等操作
			* 在创建分支前尽量保证当前分支是干净的，以减少冲突的发生
		删除分支
			git branch -d [branch_name]
			git branch -D [branch_name]		# 强制删除没有合并的分支

	远程仓库

		远程仓库：远程主机上的仓库，实际上git是分布式的，每一台主机的git结构都相似，只是把其他主机的git仓库叫做远程仓库
		创建共享仓库：
			1. 创建文件夹
				mkdir gitrepo
			2. 设置文件夹属主
				chown tarena:tarena gitrepo
			3. 将该文件夹设置为可共享的git仓库
				cd gitrepo
				git init --bare 仓库名称（以.git结尾的仓库名称）
			4. 设置本地仓库属主
				chown -R tarena:tarena 仓库名称
		添加远程仓库
			git remote add origin
			tarena@127.0.0.1:/home/tarena/python/gitrepo/fly.git
			* 默认使用ssh作为传输手段
			* 必须在本地的某个git仓库下执行才能使本地仓库和远程仓库关联
		删除远程主机
			git remote rm [origin]
		将本地分支推送到远程
			git push -u origin master
			* 在第一次向远程仓库推送时需要加-u选项，以后就不需要了
		从远程仓库获取项目
			git clone 
			tarena@127.0.0.1:/home/tarena/python/gitrepo/fly.git
		从远程仓库拉取分支或代码
			直接拉取远程分支和当前工作分支合并
			git pull origin dev_Tom
			拉取远程分支到本地，不合并
			git pull origin dev_Tom		:	dev_Tom
							远程分支名		本地分支名
		代码推送和拉取
			将本地代码推送到连接的远程仓库
			git push
			git push --force origin		# 当本地版本比远程版本旧时，用本地旧版本覆盖远程新版本
			从远程仓库更新代码
			git pull
			git fetch	# 如果有新的分支拉取到本地不会和本地分支合并

	github
		github是一个开源项目社区网站，拥有全球最多的开源项目。
		开发者可以注册这个网站，建立自己的github仓库，然后就可以在本地，通过git操作远程仓库一样操作github仓库
		git 是github唯一指定的代码管理工具
		网址：https://github.com/
		添加ssh密钥
			1. 在本地主机生成ssh密钥对
				ssh-keygen
				* 默认密钥对存放在~/.ssh/下
				* 生成过程会提示设置密码，如果直接回车则表示不设置密码
			2. 进入~/.ssh目录复制id_rsa.pub 公钥内容
			3. 登录github账号
				在settings --> 
				SSH and GPG keys --> 
				new ssh key --> 
				填写title，将复制内容加入key文本框，点击add...
		创建新的github仓库
			在 new repository -->
			填写仓库名和基本描述
			根据情况选择是否添加readme等内容
			选择公有还是私有
			--> 点击创建

	操作github仓库
		1. git remote 连接远程github仓库，如果需要输入密码，输入github密码即可
		2. 使用git push 等操作远程仓库的方法操作即可